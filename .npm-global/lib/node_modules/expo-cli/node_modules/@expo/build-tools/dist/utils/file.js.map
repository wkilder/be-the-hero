{"version":3,"file":"file.js","sourceRoot":"","sources":["../../src/utils/file.ts"],"names":[],"mappings":";;;;;AAAA,gDAAwB;AAExB,wDAA0B;AAC1B,8CAAsB;AAItB,MAAM,yBAAyB,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;AAEjD,KAAK,UAAU,YAAY,CAAC,KAAe,EAAE,OAAO,GAAG,GAAG;IACxD,OAAO,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC;QACpD,UAAU,EAAE,MAAM,kBAAE,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,EAAE,QAAQ,CAAC;QACzE,IAAI,EAAE,YAAY;KACnB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC;AAmBC,oCAAY;AAjBd,KAAK,UAAU,SAAS,CACtB,MAAc,EACd,UAAkB,EAClB,UAAkB,yBAAyB;IAE3C,MAAM,WAAW,GAAG,kBAAE,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;IACrD,MAAM,MAAM,GAAG,aAAG,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;IAC/C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzB,MAAM,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC7B,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;QAC9B,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;AACL,CAAC;AAGC,8BAAS","sourcesContent":["import path from 'path';\n\nimport fs from 'fs-extra';\nimport got from 'got';\n\nimport { FileList } from '../types';\n\nconst MAX_S3_FILE_FETCH_TIMOEUT = 1000 * 60 * 20;\n\nasync function readFileList(paths: string[], rootDir = '.'): Promise<FileList> {\n  return Promise.all(paths.map(async (relativePath) => ({\n    base64Data: await fs.readFile(path.join(rootDir, relativePath), 'base64'),\n    path: relativePath,\n  })));\n}\n\nasync function fetchFile(\n  srcUrl: string,\n  outputPath: string,\n  timeout: number = MAX_S3_FILE_FETCH_TIMOEUT,\n): Promise<void> {\n  const writeStream = fs.createWriteStream(outputPath);\n  const stream = got.stream(srcUrl, { timeout });\n  stream.pipe(writeStream);\n\n  await new Promise((res, rej) => {\n    stream.on('end', () => res());\n    stream.on('error', (err) => rej(err));\n  });\n}\n\nexport {\n  fetchFile,\n  readFileList,\n};\n"]}