import { SpawnOptions } from '@expo/spawn-async';
/**
 * Returns true if the project is using yarn, false if the project is using npm.
 *
 * @param projectRoot
 */
export declare function isUsingYarn(projectRoot: string): boolean;
declare type Logger = (...args: any[]) => void;
export interface PackageManager {
    installAsync(): Promise<void>;
    addAsync(...names: string[]): Promise<void>;
    addDevAsync(...names: string[]): Promise<void>;
    versionAsync(): Promise<string>;
    getConfigAsync(key: string): Promise<string>;
}
export declare class NpmPackageManager implements PackageManager {
    options: SpawnOptions;
    private log;
    constructor({ cwd, log }: {
        cwd: string;
        log?: Logger;
    });
    get name(): string;
    installAsync(): Promise<void>;
    addAsync(...names: string[]): Promise<void>;
    addDevAsync(...names: string[]): Promise<void>;
    versionAsync(): Promise<string>;
    getConfigAsync(key: string): Promise<string>;
    private _runAsync;
    private _parseSpecs;
    private _patchAsync;
}
export declare class YarnPackageManager implements PackageManager {
    options: SpawnOptions;
    private log;
    constructor({ cwd, log }: {
        cwd: string;
        log?: Logger;
    });
    get name(): string;
    installAsync(): Promise<void>;
    addAsync(...names: string[]): Promise<void>;
    addDevAsync(...names: string[]): Promise<void>;
    versionAsync(): Promise<string>;
    getConfigAsync(key: string): Promise<string>;
    private _runAsync;
}
export declare type CreateForProjectOptions = {
    npm?: boolean;
    yarn?: boolean;
    log?: Logger;
};
export declare function createForProject(projectRoot: string, options?: CreateForProjectOptions): NpmPackageManager | YarnPackageManager;
export declare function getModulesPath(projectRoot: string): string;
export declare function getPossibleProjectRoot(): string;
export {};
