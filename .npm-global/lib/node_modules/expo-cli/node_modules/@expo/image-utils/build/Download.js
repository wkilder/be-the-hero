"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const path_1 = __importDefault(require("path"));
const stream_1 = __importDefault(require("stream"));
const tempy_1 = __importDefault(require("tempy"));
const util_1 = __importDefault(require("util"));
const jimp_1 = __importDefault(require("jimp"));
// cache downloaded images into memory
const cacheDownloadedKeys = {};
function stripQueryParams(url) {
    return url.split('?')[0].split('#')[0];
}
function downloadOrUseCachedImage(url) {
    return __awaiter(this, void 0, void 0, function* () {
        if (url in cacheDownloadedKeys) {
            return cacheDownloadedKeys[url];
        }
        if (url.startsWith('http')) {
            cacheDownloadedKeys[url] = yield downloadImage(url);
        }
        else {
            cacheDownloadedKeys[url] = url;
        }
        return cacheDownloadedKeys[url];
    });
}
exports.downloadOrUseCachedImage = downloadOrUseCachedImage;
function downloadImage(url) {
    return __awaiter(this, void 0, void 0, function* () {
        const outputPath = tempy_1.default.directory();
        const response = yield node_fetch_1.default(url);
        if (!response.ok) {
            throw new Error(`It was not possible to download image from '${url}'`);
        }
        // Download to local file
        const streamPipeline = util_1.default.promisify(stream_1.default.pipeline);
        const localPath = path_1.default.join(outputPath, path_1.default.basename(stripQueryParams(url)));
        yield streamPipeline(response.body, fs_extra_1.default.createWriteStream(localPath));
        // If an image URL doesn't have a name, get the mime type and move the file.
        const img = yield jimp_1.default.read(localPath);
        const mime = img
            .getMIME()
            .split('/')
            .pop();
        if (!localPath.endsWith(mime)) {
            const newPath = path_1.default.join(outputPath, `image.${mime}`);
            yield fs_extra_1.default.move(localPath, newPath);
            return newPath;
        }
        return localPath;
    });
}
exports.downloadImage = downloadImage;
//# sourceMappingURL=Download.js.map