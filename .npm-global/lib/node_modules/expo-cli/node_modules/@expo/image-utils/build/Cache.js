"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = __importDefault(require("crypto"));
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const CACHE_LOCATION = '.expo/web/cache/production/images';
const cacheKeys = {};
// Calculate SHA256 Checksum value of a file based on its contents
function calculateHash(filePath) {
    const contents = filePath.startsWith('http') ? filePath : fs_extra_1.readFileSync(filePath);
    return crypto_1.default
        .createHash('sha256')
        .update(contents)
        .digest('hex');
}
// Create a hash key for caching the images between builds
function createCacheKey(fileSource, properties) {
    const hash = calculateHash(fileSource);
    return [hash]
        .concat(properties)
        .filter(Boolean)
        .join('-');
}
exports.createCacheKey = createCacheKey;
function createCacheKeyWithDirectoryAsync(projectRoot, type, icon) {
    return __awaiter(this, void 0, void 0, function* () {
        const cacheKey = `${type}-${createCacheKey(icon.src, [icon.resizeMode, icon.backgroundColor])}`;
        if (!(cacheKey in cacheKeys)) {
            cacheKeys[cacheKey] = yield ensureCacheDirectory(projectRoot, type, cacheKey);
        }
        return cacheKey;
    });
}
exports.createCacheKeyWithDirectoryAsync = createCacheKeyWithDirectoryAsync;
function ensureCacheDirectory(projectRoot, type, cacheKey) {
    return __awaiter(this, void 0, void 0, function* () {
        const cacheFolder = path_1.join(projectRoot, CACHE_LOCATION, type, cacheKey);
        yield fs_extra_1.ensureDir(cacheFolder);
        return cacheFolder;
    });
}
exports.ensureCacheDirectory = ensureCacheDirectory;
function getImageFromCacheAsync(fileName, cacheKey) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return yield fs_extra_1.readFile(path_1.resolve(cacheKeys[cacheKey], fileName));
        }
        catch (_) {
            return null;
        }
    });
}
exports.getImageFromCacheAsync = getImageFromCacheAsync;
function cacheImageAsync(fileName, buffer, cacheKey) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield fs_extra_1.writeFile(path_1.resolve(cacheKeys[cacheKey], fileName), buffer);
        }
        catch ({ message }) {
            console.warn(`Error caching image: "${fileName}". ${message}`);
        }
    });
}
exports.cacheImageAsync = cacheImageAsync;
function clearUnusedCachesAsync(projectRoot, type) {
    return __awaiter(this, void 0, void 0, function* () {
        // Clean up any old caches
        const cacheFolder = path_1.join(projectRoot, CACHE_LOCATION, type);
        yield fs_extra_1.ensureDir(cacheFolder);
        const currentCaches = fs_extra_1.readdirSync(cacheFolder);
        if (!Array.isArray(currentCaches)) {
            console.warn('Failed to read the icon cache');
            return;
        }
        const deleteCachePromises = [];
        for (const cache of currentCaches) {
            // skip hidden folders
            if (cache.startsWith('.')) {
                continue;
            }
            // delete
            if (!(cache in cacheKeys)) {
                deleteCachePromises.push(fs_extra_1.remove(path_1.join(cacheFolder, cache)));
            }
        }
        yield Promise.all(deleteCachePromises);
    });
}
exports.clearUnusedCachesAsync = clearUnusedCachesAsync;
//# sourceMappingURL=Cache.js.map