"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const jimp_1 = __importDefault(require("jimp"));
const path = __importStar(require("path"));
function resizeBufferAsync(buffer, sizes) {
    return __awaiter(this, void 0, void 0, function* () {
        const jimpImage = yield jimp_1.default.read(buffer);
        const mime = jimpImage.getMIME();
        return Promise.all(sizes.map(size => jimpImage.resize(size, size).getBufferAsync(mime)));
    });
}
exports.resizeBufferAsync = resizeBufferAsync;
function convertFormat(format) {
    var _a;
    if (typeof format === 'undefined')
        return format;
    const input = (_a = format) === null || _a === void 0 ? void 0 : _a.toLowerCase();
    switch (input) {
        case 'png':
        case 'webp':
        case 'jpeg':
            return `image/${input}`;
        case 'jpg':
            return `image/jpeg`;
    }
    return undefined;
}
exports.convertFormat = convertFormat;
function jimpAsync(options, commands = []) {
    return __awaiter(this, void 0, void 0, function* () {
        if (commands.length) {
            const command = commands.shift();
            if (command) {
                let input;
                if (command.operation === 'resize') {
                    input = yield resize(options, command);
                }
                else if (command.operation === 'flatten') {
                    input = yield flatten(options, command);
                }
                else {
                    throw new Error(`The operation: '${command.operation}' is not supported with Jimp`);
                }
                // @ts-ignore
                return jimpAsync(Object.assign(Object.assign({}, options), { input }), commands);
            }
        }
        const image = yield getJimpImageAsync(options.input);
        const mime = typeof options.format === 'string' ? options.format : image.getMIME();
        const imgBuffer = yield image.getBufferAsync(mime);
        if (typeof options.output === 'string') {
            if (yield isFolderAsync(options.output)) {
                yield fs_extra_1.default.writeFile(path.join(options.output, path.basename(options.originalInput)), imgBuffer);
            }
            else {
                yield fs_extra_1.default.writeFile(options.output, imgBuffer);
            }
        }
        return imgBuffer;
    });
}
exports.jimpAsync = jimpAsync;
function isFolderAsync(path) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return (yield fs_extra_1.default.stat(path)).isDirectory();
        }
        catch (e) {
            return false;
        }
    });
}
exports.isFolderAsync = isFolderAsync;
function getJimpImageAsync(input) {
    return __awaiter(this, void 0, void 0, function* () {
        // @ts-ignore: Jimp types are broken
        if (typeof input === 'string' || input instanceof Buffer)
            return jimp_1.default.read(input);
        return input;
    });
}
function resize({ input, quality = 100 }, { background, position, fit, width, height = jimp_1.default.AUTO }) {
    return __awaiter(this, void 0, void 0, function* () {
        let initialImage = yield getJimpImageAsync(input);
        const jimpPosition = convertPosition(position);
        const jimpQuality = typeof quality !== 'number' ? 100 : quality;
        if (fit === 'cover') {
            initialImage = initialImage.cover(width, height, jimpPosition);
        }
        else if (fit === 'contain') {
            initialImage = initialImage.contain(width, height, jimpPosition);
        }
        else {
            throw new Error(`Unsupported fit: ${fit}. Please choose either 'cover', or 'contain' when using Jimp`);
        }
        if (background) {
            initialImage = initialImage.background(jimp_1.default.cssColorToHex(background));
        }
        return yield initialImage.quality(jimpQuality);
    });
}
exports.resize = resize;
function flatten({ input, quality = 100 }, { background }) {
    return __awaiter(this, void 0, void 0, function* () {
        const initialImage = yield getJimpImageAsync(input);
        const jimpQuality = typeof quality !== 'number' ? 100 : quality;
        return initialImage.quality(jimpQuality).background(jimp_1.default.cssColorToHex(background));
    });
}
/**
 * Convert sharp position to Jimp position.
 *
 * @param position
 */
function convertPosition(position) {
    if (!position)
        return convertPosition('center');
    switch (position) {
        case 'center':
        case 'centre':
            return jimp_1.default.VERTICAL_ALIGN_MIDDLE | jimp_1.default.HORIZONTAL_ALIGN_CENTER;
        case 'north':
        case 'top':
            return jimp_1.default.VERTICAL_ALIGN_TOP | jimp_1.default.HORIZONTAL_ALIGN_CENTER;
        case 'east':
        case 'right':
            return jimp_1.default.VERTICAL_ALIGN_MIDDLE | jimp_1.default.HORIZONTAL_ALIGN_RIGHT;
        case 'south':
        case 'bottom':
            return jimp_1.default.VERTICAL_ALIGN_BOTTOM | jimp_1.default.HORIZONTAL_ALIGN_CENTER;
        case 'west':
        case 'left':
            return jimp_1.default.VERTICAL_ALIGN_MIDDLE | jimp_1.default.HORIZONTAL_ALIGN_LEFT;
        case 'northeast':
        case 'right top':
            return jimp_1.default.VERTICAL_ALIGN_TOP | jimp_1.default.HORIZONTAL_ALIGN_RIGHT;
        case 'southeast':
        case 'right bottom':
            return jimp_1.default.VERTICAL_ALIGN_BOTTOM | jimp_1.default.HORIZONTAL_ALIGN_RIGHT;
        case 'southwest':
        case 'left bottom':
            return jimp_1.default.VERTICAL_ALIGN_BOTTOM | jimp_1.default.HORIZONTAL_ALIGN_LEFT;
        case 'northwest':
        case 'left top':
            return jimp_1.default.VERTICAL_ALIGN_TOP | jimp_1.default.HORIZONTAL_ALIGN_LEFT;
        case 'entropy':
        case 'attention':
            throw new Error(`Position: '${position}' is not supported`);
        default:
            throw new Error(`Unknown position: '${position}'`);
    }
}
//# sourceMappingURL=jimp.js.map