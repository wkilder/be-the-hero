{"version":3,"file":"Image.js","sourceRoot":"","sources":["../src/Image.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport mime from 'mime';\n\nimport * as Cache from './Cache';\nimport * as Download from './Download';\nimport * as Ico from './Ico';\nimport { ImageOptions } from './Image.types';\nimport * as Jimp from './jimp';\nimport * as Sharp from './sharp';\n\nconst supportedMimeTypes = ['image/png', 'image/jpeg', 'image/webp', 'image/gif'];\n\nlet hasWarned: boolean = false;\n\nasync function resizeImagesAsync(buffer: Buffer, sizes: number[]): Promise<Buffer[]> {\n  const sharp = await getSharpAsync();\n  if (!sharp) {\n    return Jimp.resizeBufferAsync(buffer, sizes);\n  }\n  return Sharp.resizeBufferAsync(buffer, sizes);\n}\n\nasync function resizeAsync(imageOptions: ImageOptions): Promise<Buffer> {\n  let sharp: any = await getSharpAsync();\n  const { width, height, backgroundColor, resizeMode } = imageOptions;\n  if (!sharp) {\n    const inputOptions: any = { input: imageOptions.src, quality: 100 };\n    const jimp = await Jimp.resize(inputOptions, {\n      width,\n      height,\n      fit: resizeMode,\n      background: backgroundColor,\n    });\n    const imgBuffer = await jimp.getBufferAsync(jimp.getMIME());\n    return imgBuffer;\n  }\n  try {\n    let sharpBuffer = sharp(imageOptions.src)\n      .ensureAlpha()\n      .resize(width, height, { fit: resizeMode, background: 'transparent' });\n\n    // Skip an extra step if the background is explicitly transparent.\n    if (backgroundColor && backgroundColor !== 'transparent') {\n      // Add the background color to the image\n      sharpBuffer = sharpBuffer.composite([\n        {\n          // create a background color\n          input: {\n            create: {\n              width,\n              height,\n              // allow alpha colors\n              channels: 4,\n              background: backgroundColor,\n            },\n          },\n          // dest-over makes the first image (input) appear on top of the created image (background color)\n          blend: 'dest-over',\n        },\n      ]);\n    }\n\n    return await sharpBuffer.png().toBuffer();\n  } catch ({ message }) {\n    throw new Error(\n      `It was not possible to generate splash screen '${imageOptions.src}'. ${message}`\n    );\n  }\n}\n\nasync function getSharpAsync(): Promise<any> {\n  let sharp: any;\n  if (await Sharp.isAvailableAsync()) sharp = await Sharp.findSharpInstanceAsync();\n  return sharp;\n}\n\nfunction getDimensionsId(imageOptions: Pick<ImageOptions, 'width' | 'height'>): string {\n  return imageOptions.width === imageOptions.height\n    ? `${imageOptions.width}`\n    : `${imageOptions.width}x${imageOptions.height}`;\n}\n\nasync function maybeWarnAboutInstallingSharpAsync() {\n  // Putting the warning here will prevent the warning from showing if all images were reused from the cache\n  if (!hasWarned && !(await Sharp.isAvailableAsync())) {\n    hasWarned = true;\n    console.log();\n    console.log(\n      chalk.bgYellow.black(\n        `Using node to generate images. This is much slower than using native packages.`\n      )\n    );\n    console.log(\n      chalk.yellow(\n        `\\u203A Optionally you can stop the process and try again after successfully running \\`npm install -g sharp-cli\\`.\\n\\u203A If you are using \\`expo-cli\\` to build your project then you could use the \\`--no-pwa\\` flag to skip the PWA asset generation step entirely.`\n      )\n    );\n  }\n}\n\nasync function ensureImageOptionsAsync(imageOptions: ImageOptions): Promise<ImageOptions> {\n  const icon = {\n    ...imageOptions,\n    src: await Download.downloadOrUseCachedImage(imageOptions.src),\n  };\n\n  const mimeType = mime.getType(icon.src);\n\n  if (!mimeType) {\n    throw new Error(`Invalid mimeType for image with source: ${icon.src}`);\n  }\n  if (!supportedMimeTypes.includes(mimeType)) {\n    throw new Error(`Supplied image is not a supported image type: ${imageOptions.src}`);\n  }\n\n  if (!icon.name) {\n    icon.name = `icon_${getDimensionsId(imageOptions)}.${mime.getExtension(mimeType)}`;\n  }\n\n  return icon;\n}\n\nexport async function generateImageAsync(\n  options: { projectRoot: string; cacheType: string },\n  imageOptions: ImageOptions\n): Promise<{ source: Buffer; name: string }> {\n  const icon = await ensureImageOptionsAsync(imageOptions);\n\n  const cacheKey = await Cache.createCacheKeyWithDirectoryAsync(\n    options.projectRoot,\n    options.cacheType,\n    icon\n  );\n\n  const name = icon.name!;\n  let source: Buffer | null = await Cache.getImageFromCacheAsync(name, cacheKey);\n\n  if (!source) {\n    await maybeWarnAboutInstallingSharpAsync();\n    source = await resizeAsync(icon);\n    await Cache.cacheImageAsync(name, source, cacheKey);\n  }\n\n  return { name, source };\n}\n\nexport async function generateFaviconAsync(\n  pngImageBuffer: Buffer,\n  sizes: number[] = [16, 32, 48]\n): Promise<Buffer> {\n  const buffers = await resizeImagesAsync(pngImageBuffer, sizes);\n  return await Ico.generateAsync(buffers);\n}\n"]}