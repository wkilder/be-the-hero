{"version":3,"sources":["detach/AssetBundle.ts"],"names":["EXPO_DOMAINS","ASSETS_DIR_DEFAULT_URL","bundleAsync","context","assets","dest","fs","ensureDir","urlResolver","createAssetsUrlResolver","asset","downloadAssetAsync","concurrency","extensionIndex","lastIndexOf","prefixLength","length","hash","substring","path","join","retries","assetsDirUrl","published","url","assetUrlOverride","config","publishedUrl","hostname","parse","Error","maybeExpoDomain","split","includes","resolve"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,MAAMA,YAAY,GAAG,CAAC,SAAD,EAAY,UAAZ,EAAwB,WAAxB,EAAqC,WAArC,CAArB;AACA,MAAMC,sBAAsB,GAAG,+CAA/B;;AAIO,eAAeC,WAAf,CAA2BC,OAA3B,EAAyCC,MAAzC,EAA2DC,IAA3D,EAAyE;AAC9E,MAAI,CAACD,MAAL,EAAa;AACX;AACD;;AAED,QAAME,mBAAGC,SAAH,CAAaF,IAAb,CAAN;AAEA,QAAMG,WAAW,GAAGC,uBAAuB,CAACN,OAAD,CAA3C;AACA,QAAM,qBAAKC,MAAL,EAAaM,KAAK,IAAIC,kBAAkB,CAACH,WAAD,EAAcH,IAAd,EAAoBK,KAApB,CAAxC,EAAoE;AAAEE,IAAAA,WAAW,EAAE;AAAf,GAApE,CAAN;AACD;;AAED,eAAeD,kBAAf,CAAkCH,WAAlC,EAA4DH,IAA5D,EAA0EK,KAA1E,EAAyF;AACvF,QAAMG,cAAc,GAAGH,KAAK,CAACI,WAAN,CAAkB,GAAlB,CAAvB;AACA,QAAMC,YAAY,GAAG,SAASC,MAA9B;AACA,QAAMC,IAAI,GACRJ,cAAc,IAAI,CAAlB,GACIH,KAAK,CAACQ,SAAN,CAAgBH,YAAhB,EAA8BF,cAA9B,CADJ,GAEIH,KAAK,CAACQ,SAAN,CAAgBH,YAAhB,CAHN;AAIA,QAAM,uBAAO,MAAM,yCAAmBP,WAAW,CAACS,IAAD,CAA9B,EAAsCE,gBAAKC,IAAL,CAAUf,IAAV,EAAgBK,KAAhB,CAAtC,CAAb,EAA4E;AAAEW,IAAAA,OAAO,EAAE;AAAX,GAA5E,CAAN;AACD;;AAED,SAASZ,uBAAT,CAAiCN,OAAjC,EAA6E;AAC3E,MAAImB,YAAY,GAAGrB,sBAAnB;;AACA,MAAIE,OAAO,IAAIA,OAAO,CAACoB,SAAnB,IAAgCpB,OAAO,CAACoB,SAAR,CAAkBC,GAAtD,EAA2D;AACzD,UAAM;AAAEC,MAAAA,gBAAgB,GAAG;AAArB,QAAoCtB,OAAO,CAACuB,MAAlD;AACA,UAAMC,YAAY,GAAGxB,OAAO,CAACoB,SAAR,CAAkBC,GAAvC;;AACA,UAAM;AAAEI,MAAAA;AAAF,QAAeJ,eAAIK,KAAJ,CAAUF,YAAV,CAArB;;AACA,QAAIC,QAAQ,IAAI,IAAhB,EAAsB;AACpB,YAAM,IAAIE,KAAJ,CACH,6CAA4CH,YAAa,2CADtD,CAAN;AAGD;;AACD,UAAMI,eAAe,GAAG,0BAAUH,QAAQ,CAACI,KAAT,CAAe,GAAf,CAAV,EAA+B,CAA/B,EAAkCZ,IAAlC,CAAuC,GAAvC,CAAxB;;AACA,QAAI,CAACpB,YAAY,CAACiC,QAAb,CAAsBF,eAAtB,CAAL,EAA6C;AAC3CT,MAAAA,YAAY,GAAGE,eAAIU,OAAJ,CAAYP,YAAZ,EAA0BF,gBAA1B,CAAf;AACD;AACF;;AACD,SAAOR,IAAI,IAAI,wBAAQK,YAAR,EAAsBL,IAAtB,CAAf;AACD","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport url from 'url';\n\nimport takeRight from 'lodash/takeRight';\nimport pMap from 'p-map';\nimport pRetry from 'p-retry';\nimport urlJoin from 'url-join';\n\nimport { AnyStandaloneContext } from './StandaloneContext';\nimport { saveUrlToPathAsync } from './ExponentTools';\n\nconst EXPO_DOMAINS = ['expo.io', 'exp.host', 'expo.test', 'localhost'];\nconst ASSETS_DIR_DEFAULT_URL = 'https://d1wp6m56sqw74a.cloudfront.net/~assets';\n\ntype UrlResolver = (hash: string) => string;\n\nexport async function bundleAsync(context: any, assets: string[], dest: string) {\n  if (!assets) {\n    return;\n  }\n\n  await fs.ensureDir(dest);\n\n  const urlResolver = createAssetsUrlResolver(context);\n  await pMap(assets, asset => downloadAssetAsync(urlResolver, dest, asset), { concurrency: 5 });\n}\n\nasync function downloadAssetAsync(urlResolver: UrlResolver, dest: string, asset: string) {\n  const extensionIndex = asset.lastIndexOf('.');\n  const prefixLength = 'asset_'.length;\n  const hash =\n    extensionIndex >= 0\n      ? asset.substring(prefixLength, extensionIndex)\n      : asset.substring(prefixLength);\n  await pRetry(() => saveUrlToPathAsync(urlResolver(hash), path.join(dest, asset)), { retries: 3 });\n}\n\nfunction createAssetsUrlResolver(context: AnyStandaloneContext): UrlResolver {\n  let assetsDirUrl = ASSETS_DIR_DEFAULT_URL;\n  if (context && context.published && context.published.url) {\n    const { assetUrlOverride = './assets' } = context.config;\n    const publishedUrl = context.published.url;\n    const { hostname } = url.parse(publishedUrl);\n    if (hostname == null) {\n      throw new Error(\n        `Could not resolve asset URLs relative to \"${publishedUrl}\". Published URL must be an absolute URL.`\n      );\n    }\n    const maybeExpoDomain = takeRight(hostname.split('.'), 2).join('.');\n    if (!EXPO_DOMAINS.includes(maybeExpoDomain)) {\n      assetsDirUrl = url.resolve(publishedUrl, assetUrlOverride);\n    }\n  }\n  return hash => urlJoin(assetsDirUrl, hash);\n}\n"],"file":"../../detach/AssetBundle.js","sourceRoot":"/@expo/xdl@57.7.1/src"}