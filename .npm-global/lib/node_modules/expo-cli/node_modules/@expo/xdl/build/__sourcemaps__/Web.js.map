{"version":3,"sources":["Web.ts"],"names":["isDebugModeEnabled","getenv","boolish","isInfoEnabled","shouldWebpackClearLogs","logEnvironmentInfo","projectRoot","tag","config","mode","chalk","bold","applyEnvironmentVariables","console","log","bgYellow","black","output","optimization","devtoolLineToLine","pathinfo","namedModules","namedChunks","moduleIds","chunkIds","splitChunks","name","Object","assign","invokeWebpackConfigAsync","env","argv","projectWebpackConfig","path","resolve","fs","existsSync","webpackConfig","require","createExpoWebpackConfigAsync","openProjectAsync","url","UrlUtils","constructWebAppUrlAsync","hostType","Error","success","e","Logger","global","error","message","onlySupportsWebAsync","exp","skipSDKVersionRequirement","Array","isArray","platforms","length"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs-extra';\nimport getenv from 'getenv';\nimport { getConfig } from '@expo/config';\nimport path from 'path';\nimport openBrowser from 'react-dev-utils/openBrowser';\nimport webpack from 'webpack';\nimport { Configuration as WebpackDevServerConfiguration } from 'webpack-dev-server';\n\nimport Logger from './Logger';\nimport { LogTag, logWarning } from './project/ProjectUtils';\nimport * as UrlUtils from './UrlUtils';\n\nexport interface WebpackConfiguration extends webpack.Configuration {\n  devServer?: WebpackDevServerConfiguration;\n}\n\nexport type WebEnvironment = {\n  projectRoot: string;\n  isImageEditingEnabled: boolean;\n  // deprecated\n  pwa: boolean;\n  mode: 'development' | 'production' | 'test' | 'none';\n  https: boolean;\n};\n\n// When you have errors in the production build that aren't present in the development build you can use `EXPO_WEB_DEBUG=true expo start --no-dev` to debug those errors.\n// - Prevent the production build from being minified\n// - Include file path info comments in the bundle\nexport function isDebugModeEnabled(): boolean {\n  return getenv.boolish('EXPO_WEB_DEBUG', false);\n}\n\nexport function isInfoEnabled(): boolean {\n  return getenv.boolish('EXPO_WEB_INFO', false);\n}\n\nexport function shouldWebpackClearLogs(): boolean {\n  return !isDebugModeEnabled() && !isInfoEnabled() && !getenv.boolish('EXPO_DEBUG', false);\n}\n\nexport function logEnvironmentInfo(\n  projectRoot: string,\n  tag: LogTag,\n  config: webpack.Configuration\n): void {\n  if (isDebugModeEnabled() && config.mode === 'production') {\n    logWarning(\n      projectRoot,\n      tag,\n      `Webpack is bundling your project in \\`production\\` mode with the ${chalk.bold(\n        '`EXPO_WEB_DEBUG`'\n      )} environment variable enabled. You should toggle it off before building for production.`\n    );\n  }\n}\n\nfunction applyEnvironmentVariables(config: WebpackConfiguration): WebpackConfiguration {\n  // Use EXPO_DEBUG_WEB=true to enable debugging features for cases where the prod build\n  // has errors that aren't caught in development mode.\n  // Related: https://github.com/expo/expo-cli/issues/614\n  if (isDebugModeEnabled() && config.mode === 'production') {\n    console.log(chalk.bgYellow.black('Bundling the project in debug mode.'));\n\n    const output = config.output || {};\n    const optimization = config.optimization || {};\n\n    // Enable line to line mapped mode for all/specified modules.\n    // Line to line mapped mode uses a simple SourceMap where each line of the generated source is mapped to the same line of the original source.\n    // Itâ€™s a performance optimization. Only use it if your performance need to be better and you are sure that input lines match which generated lines.\n    // true enables it for all modules (not recommended)\n    output.devtoolLineToLine = true;\n\n    // Add comments that describe the file import/exports.\n    // This will make it easier to debug.\n    output.pathinfo = true;\n    // Instead of numeric ids, give modules readable names for better debugging.\n    optimization.namedModules = true;\n    // Instead of numeric ids, give chunks readable names for better debugging.\n    optimization.namedChunks = true;\n    // Readable ids for better debugging.\n    // @ts-ignore Property 'moduleIds' does not exist.\n    optimization.moduleIds = 'named';\n    // if optimization.namedChunks is enabled optimization.chunkIds is set to 'named'.\n    // This will manually enable it just to be safe.\n    // @ts-ignore Property 'chunkIds' does not exist.\n    optimization.chunkIds = 'named';\n\n    if (optimization.splitChunks) {\n      optimization.splitChunks.name = true;\n    }\n\n    Object.assign(config, { output, optimization });\n  }\n\n  return config;\n}\n\nexport async function invokeWebpackConfigAsync(\n  env: WebEnvironment,\n  argv?: string[]\n): Promise<WebpackConfiguration> {\n  // Check if the project has a webpack.config.js in the root.\n  const projectWebpackConfig = path.resolve(env.projectRoot, 'webpack.config.js');\n  let config: WebpackConfiguration;\n  if (fs.existsSync(projectWebpackConfig)) {\n    const webpackConfig = require(projectWebpackConfig);\n    if (typeof webpackConfig === 'function') {\n      config = await webpackConfig(env, argv);\n    } else {\n      config = webpackConfig;\n    }\n  } else {\n    // Fallback to the default expo webpack config.\n    const createExpoWebpackConfigAsync = require('@expo/webpack-config');\n    config = await createExpoWebpackConfigAsync(env, argv);\n  }\n  return applyEnvironmentVariables(config);\n}\n\nexport async function openProjectAsync(\n  projectRoot: string\n): Promise<{ success: true; url: string } | { success: false; error: Error }> {\n  try {\n    let url = await UrlUtils.constructWebAppUrlAsync(projectRoot, { hostType: 'localhost' });\n    if (!url) {\n      throw new Error('Webpack Dev Server is not running');\n    }\n    openBrowser(url);\n    return { success: true, url };\n  } catch (e) {\n    Logger.global.error(`Couldn't start project on web: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n\n/**\n * If the project config `platforms` only contains the \"web\" field.\n * If no `platforms` array is defined this could still resolve true because platforms\n * will be inferred from the existence of `react-native-web` and `react-native`.\n *\n * @param projectRoot\n */\nexport async function onlySupportsWebAsync(projectRoot: string): Promise<boolean> {\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n  if (Array.isArray(exp.platforms) && exp.platforms.length === 1) {\n    return exp.platforms[0] === 'web';\n  }\n  return false;\n}\n"],"file":"../Web.js","sourceRoot":"/@expo/xdl@57.7.1/src"}