{"version":3,"sources":["credentials/Credentials.ts"],"names":["getCredentialMetadataAsync","projectRoot","platform","exp","skipSDKVersionRequirement","user","UserManager","ensureLoggedInAsync","username","owner","bundleIdentifier","ios","undefined","experienceName","slug","credentialsExistForPlatformAsync","metadata","credentials","fetchCredentials","getEncryptedCredentialsForPlatformAsync","getCredentialsForPlatform","decrypt","process","env","EXPO_LEGACY_API","response","Api","callMethodAsync","err","Error","api","ApiV2","clientForUser","getAsync","record","encodeURI","pushCredentials","distCredentials","updateCredentialsForPlatform","newCredentials","userCredentialsIds","EXPO_LECACY_API","result","putAsync","data","errors","JSON","stringify","removeCredentialsForPlatform","deleteAsync"],"mappings":"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","sourcesContent":["import { Platform, getConfig } from '@expo/config';\nimport { ApiV2 } from '../xdl';\n\nimport Api from '../Api';\nimport UserManager from '../User';\nimport * as Ios from './IosCredentials';\n\nexport type Credentials = Ios.Credentials; // can't import android types from typescript\n\nexport type CredentialMetadata = {\n  username: string;\n  experienceName: string;\n  bundleIdentifier?: string;\n  platform: string;\n  only?: any;\n};\n\nexport { Ios };\n\nexport async function getCredentialMetadataAsync(\n  projectRoot: string,\n  platform: Platform\n): Promise<CredentialMetadata> {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  const user = await UserManager.ensureLoggedInAsync();\n  let { username } = user;\n  if (exp.owner) {\n    username = exp.owner;\n  }\n\n  const bundleIdentifier = platform === 'ios' ? exp.ios?.bundleIdentifier : undefined;\n\n  return {\n    username,\n    experienceName: `@${username}/${exp.slug}`,\n    bundleIdentifier,\n    platform,\n  };\n}\n\nexport async function credentialsExistForPlatformAsync(\n  metadata: CredentialMetadata\n): Promise<boolean> {\n  const credentials = await fetchCredentials(metadata, false);\n  return !!credentials;\n}\n\nexport async function getEncryptedCredentialsForPlatformAsync(\n  metadata: CredentialMetadata\n): Promise<Credentials | undefined | null> {\n  return fetchCredentials(metadata, false);\n}\n\nexport async function getCredentialsForPlatform(\n  metadata: CredentialMetadata\n): Promise<Credentials | undefined | null> {\n  return fetchCredentials(metadata, true);\n}\n\nasync function fetchCredentials(\n  { username, experienceName, bundleIdentifier, platform }: CredentialMetadata,\n  decrypt: boolean\n): Promise<Credentials | undefined | null> {\n  // this doesn't hit our mac rpc channel, so it needs significantly less debugging\n  let credentials;\n  if (process.env.EXPO_LEGACY_API === 'true') {\n    const response = await Api.callMethodAsync('getCredentials', [], 'post', {\n      username,\n      experienceName,\n      bundleIdentifier,\n      platform,\n      decrypt,\n    });\n\n    if (response.err) {\n      throw new Error('Error fetching credentials.');\n    }\n    credentials = response.credentials;\n  } else {\n    const user = await UserManager.ensureLoggedInAsync();\n    const api = ApiV2.clientForUser(user);\n\n    if (platform === 'android') {\n      credentials = await api.getAsync(`credentials/android/keystore/${experienceName}`);\n      if (credentials['keystore']) {\n        credentials['keystore']['keystoreAlias'] = credentials['keystore']['keyAlias'];\n        delete credentials['keystore']['keyAlias'];\n      } else {\n        credentials = null;\n      }\n    } else if (platform === 'ios') {\n      const record = await api.getAsync(\n        `credentials/ios/${experienceName}/${encodeURI(bundleIdentifier ?? '')}`\n      );\n      if (record) {\n        credentials = {\n          ...record.pushCredentials,\n          ...record.distCredentials,\n          ...record.credentials,\n        };\n      } else {\n        credentials = {};\n      }\n    }\n  }\n  return credentials;\n}\n\nexport async function updateCredentialsForPlatform(\n  platform: 'android',\n  newCredentials: Credentials,\n  userCredentialsIds: Array<number>,\n  metadata: CredentialMetadata\n): Promise<void> {\n  if (process.env.EXPO_LECACY_API) {\n    const { err, credentials } = await Api.callMethodAsync('updateCredentials', [], 'post', {\n      credentials: newCredentials,\n      userCredentialsIds,\n      platform,\n      ...metadata,\n    });\n\n    if (err || !credentials) {\n      throw new Error('Error updating credentials.');\n    }\n  } else {\n    const { experienceName } = metadata;\n    const user = await UserManager.ensureLoggedInAsync();\n    const api = ApiV2.clientForUser(user);\n    const result = await api.putAsync(`credentials/android/keystore/${experienceName}`, {\n      credentials: newCredentials,\n    });\n\n    if (result.data.errors) {\n      throw new Error(`Error updating credentials: ${JSON.stringify(result.data.errors)}}`);\n    }\n  }\n}\n\nexport async function removeCredentialsForPlatform(\n  platform: 'android', // this is only used for android credential management now.\n  metadata: CredentialMetadata\n): Promise<void> {\n  // doesn't go through mac rpc, no request id needed\n  if (process.env.EXPO_LEGACY_API) {\n    const { err } = await Api.callMethodAsync('deleteCredentials', [], 'post', {\n      platform,\n      ...metadata,\n    });\n\n    if (err) {\n      throw new Error('Error deleting credentials.');\n    }\n  } else {\n    const user = await UserManager.ensureLoggedInAsync();\n    const api = ApiV2.clientForUser(user);\n    await api.deleteAsync(`credentials/android/keystore/${metadata.experienceName}`);\n  }\n}\n"],"file":"../../credentials/Credentials.js","sourceRoot":"/@expo/xdl@57.7.1/src"}