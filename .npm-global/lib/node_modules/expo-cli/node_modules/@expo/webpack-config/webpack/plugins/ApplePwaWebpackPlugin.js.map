{"version":3,"file":"ApplePwaWebpackPlugin.js","sourceRoot":"","sources":["../../src/plugins/ApplePwaWebpackPlugin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,kDAA0B;AAG1B,uCAAoG;AAEpG,wFAAkG;AASlG,SAAS,SAAS,CAAC,IAAY,EAAE,OAAe;IAC9C,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,OAAO,CAAC,UAAU,IAAI,KAAK,eAAK,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;AACvE,CAAC;AACD,SAAS,UAAU,CAAC,IAAY,EAAE,OAAe;IAC/C,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,MAAM,CAAC,UAAU,IAAI,KAAK,eAAK,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;AACtE,CAAC;AACD,MAAqB,qBAAsB,SAAQ,iCAAuB;IACxE,YACU,UAAsD,EACtD,IAAkB,EAClB,IAAwB,EACxB,YAAgC;QAExC,KAAK,EAAE,CAAC;QALA,eAAU,GAAV,UAAU,CAA4C;QACtD,SAAI,GAAJ,IAAI,CAAc;QAClB,SAAI,GAAJ,IAAI,CAAoB;QACxB,iBAAY,GAAZ,YAAY,CAAoB;IAG1C,CAAC;IAEK,WAAW,CACf,QAAkB,EAClB,WAAoC,EACpC,IAAoB;;;YAEpB,OAAO;YACP,IAAI,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;gBAC7B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC,CAAC;gBACzE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC,CAAC;aACpE;YACD,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gBAC1B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC,CAAC;aACpE;YACD,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;gBAClB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,4BAA4B,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;aACjF;YACD,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CACtB,OAAO,CAAC,uCAAuC,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CACrE,CAAC;aACH;YAED,WAAW;YACX,IAAI,IAAI,CAAC,IAAI,EAAE;gBACb,MAAM,KAAK,GAAa,IAAI,CAAC,UAAU,CAAC,KAAK;qBAC1C,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,kBAAkB,CAAC;qBACzC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAM,CAAC,CAAC;gBAEtB,MAAM,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC1B,IAAI,aAAa,GAAa,EAAE,CAAC;gBAEjC,KAAK,MAAM,IAAI,IAAI,WAAW,EAAE;oBAC9B,MAAM,KAAK,GAAG,GAAG,IAAI,IAAI,IAAI,EAAE,CAAC;oBAChC,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;wBACzB,SAAS,CACP,cAAc,EACd,oDAAoD,KAAK,SAAS,CACnE,CAAC;qBACH;yBAAM;wBACL,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBAC1B;iBACF;gBAED,MAAM,UAAU,GAAG,MAAM,iCAAsB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,EAAE;oBAC1E,KAAK,EAAE,aAAa;iBACrB,CAAC,CAAC;gBAEH,KAAK,MAAM,KAAK,IAAI,UAAU,EAAE;oBAC9B,MAAM,IAAI,SAAG,KAAK,CAAC,GAAG,0CAAE,UAAU,CAAC,KAAK,CAAC;oBACzC,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;wBAChC,SAAS,CACP,cAAc,EACd,oDAAoD,IAAI,SAAS,CAClE,CAAC;qBACH;yBAAM;wBACL,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG;4BACrC,MAAM,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM;4BAChC,IAAI,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM;yBACtC,CAAC;wBACF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;qBACrC;iBACF;aACF;iBAAM;gBACL,UAAU,CAAC,cAAc,EAAE,sDAAsD,CAAC,CAAC;aACpF;YAED,iBAAiB;YAEjB,IAAI,IAAI,CAAC,YAAY,EAAE;gBACrB,MAAM,MAAM,GAAG,MAAM,8BAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;gBAE7E,MAAM,KAAK,GAAa,IAAI,CAAC,UAAU,CAAC,KAAK;qBAC1C,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,2BAA2B,CAAC;qBAClD,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAM,CAAC,CAAC;gBAEtB,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;oBAC1B,MAAM,KAAK,SAAG,KAAK,CAAC,GAAG,0CAAE,UAAU,CAAC,KAAK,CAAC;oBAC1C,IAAI,KAAK,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;wBAClC,SAAS,CACP,uBAAuB,EACvB,6DAA6D,KAAK,UAAU,CAC7E,CAAC;qBACH;yBAAM;wBACL,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG;4BACrC,MAAM,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM;4BAChC,IAAI,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM;yBACtC,CAAC;wBACF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;qBACrC;iBACF;aACF;iBAAM;gBACL,UAAU,CAAC,uBAAuB,EAAE,sDAAsD,CAAC,CAAC;aAC7F;YACD,OAAO,IAAI,CAAC;;KACb;CACF;AAzGD,wCAyGC;AAED,SAAS,OAAO,CAAC,IAAY,EAAE,OAAe;IAC5C,OAAO;QACL,OAAO,EAAE,MAAM;QACf,OAAO,EAAE,IAAI;QACb,UAAU,EAAE;YACV,IAAI;YACJ,OAAO;SACR;KACF,CAAC;AACJ,CAAC","sourcesContent":["import chalk from 'chalk';\nimport { Compiler, compilation } from 'webpack';\n\nimport { IconOptions, ProjectOptions, generateAppleIconAsync, generateSplashAsync } from 'expo-pwa';\n\nimport ModifyHtmlWebpackPlugin, { HTMLLinkNode, HTMLPluginData } from './ModifyHtmlWebpackPlugin';\n\nexport type ApplePwaMeta = {\n  name?: string;\n  barStyle?: string;\n  isWebAppCapable?: boolean;\n  isFullScreen?: boolean;\n};\n\nfunction logNotice(type: string, message: string) {\n  console.log(chalk.magenta(`\\u203A ${type}: ${chalk.gray(message)}`));\n}\nfunction logWarning(type: string, message: string) {\n  console.log(chalk.yellow(`\\u203A ${type}: ${chalk.gray(message)}`));\n}\nexport default class ApplePwaWebpackPlugin extends ModifyHtmlWebpackPlugin {\n  constructor(\n    private pwaOptions: ProjectOptions & { links: HTMLLinkNode[] },\n    private meta: ApplePwaMeta,\n    private icon: IconOptions | null,\n    private startupImage: IconOptions | null\n  ) {\n    super();\n  }\n\n  async modifyAsync(\n    compiler: Compiler,\n    compilation: compilation.Compilation,\n    data: HTMLPluginData\n  ): Promise<HTMLPluginData> {\n    // Meta\n    if (this.meta.isWebAppCapable) {\n      data.assetTags.meta.push(metaTag('apple-mobile-web-app-capable', 'yes'));\n      data.assetTags.meta.push(metaTag('mobile-web-app-capable', 'yes'));\n    }\n    if (this.meta.isFullScreen) {\n      data.assetTags.meta.push(metaTag('apple-touch-fullscreen', 'yes'));\n    }\n    if (this.meta.name) {\n      data.assetTags.meta.push(metaTag('apple-mobile-web-app-title', this.meta.name));\n    }\n    if (this.meta.barStyle) {\n      data.assetTags.meta.push(\n        metaTag('apple-mobile-web-app-status-bar-style', this.meta.barStyle)\n      );\n    }\n\n    // App Icon\n    if (this.icon) {\n      const links: string[] = this.pwaOptions.links\n        .filter(v => v.rel === 'apple-touch-icon')\n        .map(v => v.sizes!);\n\n      const targetSizes = [180];\n      let requiredSizes: number[] = [];\n\n      for (const size of targetSizes) {\n        const sizes = `${size}x${size}`;\n        if (links.includes(sizes)) {\n          logNotice(\n            'Safari Icons',\n            `Using custom <link rel=\"apple-touch-icon\" sizes=\"${sizes}\" .../>`\n          );\n        } else {\n          requiredSizes.push(size);\n        }\n      }\n\n      const iconAssets = await generateAppleIconAsync(this.pwaOptions, this.icon, {\n        sizes: requiredSizes,\n      });\n\n      for (const asset of iconAssets) {\n        const size = asset.tag?.attributes.sizes;\n        if (size && links.includes(size)) {\n          logNotice(\n            'Safari Icons',\n            `Using custom <link rel=\"apple-touch-icon\" sizes=\"${size}\" .../>`\n          );\n        } else {\n          compilation.assets[asset.asset.path] = {\n            source: () => asset.asset.source,\n            size: () => asset.asset.source.length,\n          };\n          data.assetTags.meta.push(asset.tag);\n        }\n      }\n    } else {\n      logWarning('Safari Icons', `No template image found, skipping auto generation...`);\n    }\n\n    // Splash screens\n\n    if (this.startupImage) {\n      const assets = await generateSplashAsync(this.pwaOptions, this.startupImage);\n\n      const links: string[] = this.pwaOptions.links\n        .filter(v => v.rel === 'apple-touch-startup-image')\n        .map(v => v.media!);\n\n      for (const asset of assets) {\n        const media = asset.tag?.attributes.media;\n        if (media && links.includes(media)) {\n          logNotice(\n            'Safari Splash Screens',\n            `Using custom <link rel=\"apple-touch-startup-image\" media=\"${media}\" ... />`\n          );\n        } else {\n          compilation.assets[asset.asset.path] = {\n            source: () => asset.asset.source,\n            size: () => asset.asset.source.length,\n          };\n          data.assetTags.meta.push(asset.tag);\n        }\n      }\n    } else {\n      logWarning('Safari Splash Screens', `No template image found, skipping auto generation...`);\n    }\n    return data;\n  }\n}\n\nfunction metaTag(name: string, content: string): any {\n  return {\n    tagName: 'meta',\n    voidTag: true,\n    attributes: {\n      name,\n      content,\n    },\n  };\n}\n"]}