"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
function maybeFetchPlugin(compiler, name) {
    var _a, _b;
    return (_b = (_a = compiler.options) === null || _a === void 0 ? void 0 : _a.plugins) === null || _b === void 0 ? void 0 : _b.map(({ constructor }) => constructor).find(constructor => constructor && constructor.name === name);
}
class ModifyHtmlWebpackPlugin {
    constructor(modifyOptions = {}) {
        this.modifyOptions = modifyOptions;
    }
    modifyAsync(compiler, compilation, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return data;
        });
    }
    apply(compiler) {
        compiler.hooks.make.tapPromise(this.constructor.name, (compilation) => __awaiter(this, void 0, void 0, function* () {
            // Hook into the html-webpack-plugin processing and add the html
            const HtmlWebpackPlugin = maybeFetchPlugin(compiler, 'HtmlWebpackPlugin');
            if (HtmlWebpackPlugin) {
                if (typeof HtmlWebpackPlugin.getHooks === 'undefined') {
                    compilation.errors.push(new Error('ModifyHtmlWebpackPlugin - This ModifyHtmlWebpackPlugin version is not compatible with your current HtmlWebpackPlugin version.\n'));
                    return;
                }
                HtmlWebpackPlugin.getHooks(compilation).alterAssetTags.tapAsync(this.constructor.name, (data, htmlCallback) => __awaiter(this, void 0, void 0, function* () {
                    // Skip if a custom injectFunction returns false or if
                    // the htmlWebpackPlugin optuons includes a `favicons: false` flag
                    const isInjectionAllowed = typeof this.modifyOptions.inject === 'function'
                        ? this.modifyOptions.inject(data.plugin)
                        : data.plugin.options.pwaManifest !== false;
                    if (isInjectionAllowed === false) {
                        return htmlCallback(null, data);
                    }
                    try {
                        data = yield this.modifyAsync(compiler, compilation, data);
                    }
                    catch (error) {
                        compilation.errors.push(error);
                    }
                    htmlCallback(null, data);
                }));
            }
        }));
    }
}
exports.default = ModifyHtmlWebpackPlugin;
//# sourceMappingURL=ModifyHtmlWebpackPlugin.js.map