"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const JsonWebpackPlugin_1 = __importDefault(require("./JsonWebpackPlugin"));
function maybeFetchPlugin(compiler, name) {
    var _a, _b;
    return (_b = (_a = compiler.options) === null || _a === void 0 ? void 0 : _a.plugins) === null || _b === void 0 ? void 0 : _b.map(({ constructor }) => constructor).find(constructor => constructor && constructor.name === name);
}
class PwaManifestWebpackPlugin extends JsonWebpackPlugin_1.default {
    constructor(pwaOptions, manifest) {
        super({
            path: pwaOptions.path,
            json: manifest,
            pretty: true,
        });
        this.pwaOptions = pwaOptions;
    }
    apply(compiler) {
        super.apply(compiler);
        compiler.hooks.make.tapPromise(this.constructor.name, (compilation) => __awaiter(this, void 0, void 0, function* () {
            // Hook into the html-webpack-plugin processing and add the html
            const HtmlWebpackPlugin = maybeFetchPlugin(compiler, 'HtmlWebpackPlugin');
            if (HtmlWebpackPlugin) {
                if (typeof HtmlWebpackPlugin.getHooks === 'undefined') {
                    compilation.errors.push(new Error('PwaManifestWebpackPlugin - This PwaManifestWebpackPlugin version is not compatible with your current HtmlWebpackPlugin version.\n'));
                    return;
                }
                HtmlWebpackPlugin.getHooks(compilation).alterAssetTags.tapAsync(this.constructor.name, (data, htmlCallback) => {
                    // Skip if a custom injectFunction returns false or if
                    // the htmlWebpackPlugin optuons includes a `favicons: false` flag
                    const isInjectionAllowed = typeof this.pwaOptions.inject === 'function'
                        ? this.pwaOptions.inject(data.plugin)
                        : data.plugin.options.pwaManifest !== false;
                    if (isInjectionAllowed === false) {
                        return htmlCallback(null, data);
                    }
                    data.assetTags.meta.push({
                        tagName: 'link',
                        voidTag: true,
                        attributes: {
                            rel: 'manifest',
                            href: path.join(this.pwaOptions.publicPath, this.pwaOptions.path),
                        },
                    });
                    htmlCallback(null, data);
                });
            }
        }));
    }
}
exports.default = PwaManifestWebpackPlugin;
//# sourceMappingURL=PwaManifestWebpackPlugin.js.map