"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _os() {
  const data = _interopRequireDefault(require("os"));

  _os = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _buildTools() {
  const data = require("@expo/build-tools");

  _buildTools = function () {
    return data;
  };

  return data;
}

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _ora() {
  const data = _interopRequireDefault(require("ora"));

  _ora = function () {
    return data;
  };

  return data;
}

function _v() {
  const data = _interopRequireDefault(require("uuid/v4"));

  _v = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("./utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Builder {
  constructor(user) {
    _defineProperty(this, "client", void 0);

    this.client = _xdl().TurtleApi.clientForUser(user.sessionSecret);
  }

  async buildProject(projectDir, options) {
    const tarPath = _path().default.join(_os().default.tmpdir(), `${(0, _v().default)()}.tar.gz`);

    try {
      await (0, _utils().makeProjectTarball)(tarPath);
      const spinner = (0, _ora().default)('Uploading project to server.').start();
      const {
        s3Url
      } = await this.client.uploadFile(tarPath);
      spinner.succeed('Project uploaded.');
      const job = await (0, _buildTools().prepareJob)(options.platform, s3Url, projectDir);
      const {
        buildId
      } = await this.client.postAsync('builds', job);
      (0, _log().default)(`Build logs: ${(0, _utils().getLogsUrl)(buildId)}`);
      return await (0, _utils().waitForBuildEnd)(this.client, buildId);
    } finally {
      await _fsExtra().default.remove(tarPath);
    }
  }

  async getLatestBuilds() {
    return await this.client.getAsync('builds');
  }

}

exports.default = Builder;
//# sourceMappingURL=../../__sourcemaps__/commands/build-native/Builder.js.map
