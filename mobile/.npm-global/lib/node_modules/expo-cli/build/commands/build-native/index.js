"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _buildTools() {
  const data = require("@expo/build-tools");

  _buildTools = function () {
    return data;
  };

  return data;
}

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _Builder() {
  const data = _interopRequireDefault(require("./Builder"));

  _Builder = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("./utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function buildAction(projectDir, options) {
  if (!options.platform || !Object.values(_buildTools().Platform).includes(options.platform)) {
    throw new Error('Pass valid platform: [android|ios]');
  }

  const user = await _xdl().UserManager.ensureLoggedInAsync();
  const builder = new (_Builder().default)(user);
  const buildArtifactUrl = await builder.buildProject(projectDir, options);
  (0, _log().default)(`Artifact url: ${buildArtifactUrl}`);
}

async function statusAction() {
  const user = await _xdl().UserManager.ensureLoggedInAsync();
  const builder = new (_Builder().default)(user);
  const result = await builder.getLatestBuilds();
  (0, _utils().printBuildTable)(result.builds);
}

function _default(program) {
  program.command('build [project-dir]').description('Build an app binary for your project, signed and ready for submission to the Google Play Store / App Store.').option('-p --platform <platform>', 'Platform: [android|ios]', /^(android|ios)$/i).asyncActionProjectDir(buildAction);
  program.command('build:status').description(`Get the status of the latest builds for your project.`).asyncAction(statusAction);
}
//# sourceMappingURL=../../__sourcemaps__/commands/build-native/index.js.map
