"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.downloadFile = downloadFile;
exports.runFastlaneAsync = runFastlaneAsync;

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _get() {
  const data = _interopRequireDefault(require("lodash/get"));

  _get = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _progress() {
  const data = _interopRequireDefault(require("progress"));

  _progress = function () {
    return data;
  };

  return data;
}

function _axios() {
  const data = _interopRequireDefault(require("axios"));

  _axios = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  spawnAsyncThrowError
} = _xdl().ExponentTools;

async function downloadFile(url, dest) {
  const response = await _axios().default.get(url, {
    responseType: 'stream'
  });
  const fileSize = Number(response.headers['content-length']);
  const bar = new (_progress().default)('Downloading [:bar] :percent :etas', {
    complete: '=',
    incomplete: ' ',
    total: fileSize
  });
  response.data.pipe(_fsExtra().default.createWriteStream(dest));
  return new Promise((resolve, reject) => {
    response.data.on('data', data => bar.tick(data.length));
    response.data.on('end', () => resolve(dest));
    response.data.on('error', reject);
  });
}

async function runFastlaneAsync(program, args, {
  appleId,
  appleIdPassword,
  appleTeamId,
  itcTeamId,
  companyName
}, pipeToLogger = false) {
  const pipeToLoggerOptions = pipeToLogger ? {
    pipeToLogger: {
      stdout: true
    }
  } : {
    stdio: [0, 1, 'pipe']
  };
  const fastlaneData = appleId && appleIdPassword ? {
    FASTLANE_USER: appleId,
    FASTLANE_PASSWORD: appleIdPassword,
    FASTLANE_DONT_STORE_PASSWORD: '1',
    FASTLANE_TEAM_ID: appleTeamId,
    ...(itcTeamId && {
      FASTLANE_ITC_TEAM_ID: itcTeamId
    }),
    ...(companyName && {
      PRODUCE_COMPANY_NAME: companyName
    })
  } : {};
  const env = { ...process.env,
    ...fastlaneData
  };
  const spawnOptions = { ...pipeToLoggerOptions,
    env
  };
  const {
    stderr
  } = await spawnAsyncThrowError(program, args, spawnOptions);
  const res = JSON.parse(stderr);

  if (res.result !== 'failure') {
    return res;
  } else {
    var _res$rawDump;

    let message = res.reason !== 'Unknown reason' ? res.reason : (0, _get().default)(res, 'rawDump.message', 'Unknown error when running fastlane');
    message = `${message}${(res === null || res === void 0 ? void 0 : (_res$rawDump = res.rawDump) === null || _res$rawDump === void 0 ? void 0 : _res$rawDump.backtrace) ? `\n${res.rawDump.backtrace.map(i => `    ${i}`).join('\n')}` : ''}`;
    throw new Error(message);
  }
}
//# sourceMappingURL=../../__sourcemaps__/commands/upload/utils.js.map
