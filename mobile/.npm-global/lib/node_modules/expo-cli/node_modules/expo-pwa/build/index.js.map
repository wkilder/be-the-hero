{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig, setCustomConfigPath } from '@expo/config';\nimport * as Image from '@expo/image-utils';\nimport * as path from 'path';\n\nimport { assembleOrientationMedia, getDevices } from './Splash';\nimport { createPWAManifestFromWebConfig, getConfigForPWA } from './Manifest';\nimport { HTMLOutput, IconOptions, Manifest, ProjectOptions, SplashIcon } from './Manifest.types';\n\nexport async function generateAsync(\n  type: string,\n  options: ProjectOptions,\n  icon: IconOptions\n): Promise<HTMLOutput[]> {\n  switch (type) {\n    case 'splash':\n      return generateSplashAsync(options, icon);\n    case 'safari-icon':\n      return generateAppleIconAsync(options, icon, {});\n    case 'chrome-icon':\n      return generateChromeIconAsync(options, icon, {});\n    case 'favicon':\n      return generateFaviconAsync(options, icon);\n  }\n  throw new Error(`Invalid command type: ${type}`);\n}\n\nexport async function generateSplashAsync(\n  { projectRoot, publicPath }: ProjectOptions,\n  icon: IconOptions\n): Promise<HTMLOutput[]> {\n  const cacheType = 'apple-touch-startup-image';\n\n  // You cannot lock iOS PWA orientation, we should produce every splash screen\n  // orientation. We don't however because in iOS 13 it's far more rare to see landscape splash screens.\n  const devices = getDevices();\n\n  const icons: SplashIcon[] = Array.isArray(icon) ? icon : [];\n  if (!Array.isArray(icon)) {\n    for (const device of devices) {\n      for (const orientation of device.orientations) {\n        let width = 0;\n        let height = 0;\n        if (orientation !== 'portrait') {\n          width = device.height;\n          height = device.width;\n        } else {\n          height = device.height;\n          width = device.width;\n        }\n\n        const name = `apple-touch-startup-image-${width}x${height}.png`;\n        icons.push({\n          ...icon,\n          name,\n          width,\n          height,\n          media: assembleOrientationMedia(device.width, device.height, device.scale, orientation),\n        });\n      }\n    }\n  }\n\n  const data = await Promise.all<HTMLOutput>(\n    icons.map(\n      async (icon: SplashIcon): Promise<HTMLOutput> => {\n        const { source, name } = await Image.generateImageAsync({ projectRoot, cacheType }, icon);\n\n        const href = `pwa/apple-touch-startup-image/${name}`;\n\n        return {\n          asset: {\n            source,\n            path: href,\n          },\n          tag: {\n            tagName: 'link',\n            attributes: {\n              rel: 'apple-touch-startup-image',\n              media: icon.media,\n              // TODO(Bacon): Use sizes to query splash screens better\n              // sizes: `${icon.width}x${icon.height}`,\n              href: path.join(publicPath, href),\n            },\n          },\n        };\n      }\n    )\n  );\n\n  await Image.Cache.clearUnusedCachesAsync(projectRoot, cacheType);\n\n  return data;\n}\n\nexport async function generateAppleIconAsync(\n  { projectRoot, publicPath }: ProjectOptions,\n  icon: IconOptions,\n  { sizes = [180] }: { sizes?: number[] }\n): Promise<HTMLOutput[]> {\n  const cacheType = 'apple-touch-icon';\n\n  const data = await Promise.all<HTMLOutput>(\n    sizes.map(\n      async (size: number): Promise<HTMLOutput> => {\n        const rel = 'apple-touch-icon';\n        const { source, name } = await Image.generateImageAsync(\n          { projectRoot, cacheType },\n          { ...icon, width: size, height: size, name: `${rel}-${size}.png` }\n        );\n\n        const href = `pwa/${rel}/${name}`;\n\n        return {\n          asset: {\n            source,\n            path: href,\n          },\n          tag: {\n            tagName: 'link',\n            attributes: {\n              rel,\n              sizes: `${size}x${size}`,\n              href: path.join(publicPath, href),\n            },\n          },\n        };\n      }\n    )\n  );\n\n  // Don't clear the caches if no generation was performed.\n  if (!sizes.length) {\n    await Image.Cache.clearUnusedCachesAsync(projectRoot, cacheType);\n  }\n\n  return data;\n}\n\nexport async function generateChromeIconAsync(\n  { projectRoot, publicPath }: ProjectOptions,\n  icon: IconOptions,\n  { sizes = [144, 192, 512] }: { sizes?: number[] }\n): Promise<HTMLOutput[]> {\n  const cacheType = 'chrome-icon';\n\n  const data = await Promise.all<HTMLOutput>(\n    sizes.map(\n      async (size: number): Promise<HTMLOutput> => {\n        const rel = 'chrome-icon';\n        const { source, name } = await Image.generateImageAsync(\n          { projectRoot, cacheType },\n          { ...icon, width: size, height: size, name: `${rel}-${size}.png` }\n        );\n\n        const href = `pwa/${rel}/${name}`;\n\n        return {\n          asset: {\n            source,\n            path: href,\n          },\n          manifest: {\n            src: path.join(publicPath, href),\n            sizes: `${size}x${size}`,\n            type: 'image/png',\n          },\n        };\n      }\n    )\n  );\n\n  // Don't clear the caches if no generation was performed.\n  if (!sizes.length) {\n    await Image.Cache.clearUnusedCachesAsync(projectRoot, cacheType);\n  }\n\n  return data;\n}\n\nexport async function generateFaviconAsync(\n  { projectRoot, publicPath }: ProjectOptions,\n  icon: IconOptions\n): Promise<HTMLOutput[]> {\n  const cacheType = 'favicon';\n  const dimensions = [16, 32, 48];\n  const data: HTMLOutput[] = await Promise.all<HTMLOutput>(\n    dimensions.map(\n      async (size: number): Promise<HTMLOutput> => {\n        const rel = 'icon';\n        const { source, name } = await Image.generateImageAsync(\n          { projectRoot, cacheType },\n          {\n            backgroundColor: 'transparent',\n            ...icon,\n            width: size,\n            height: size,\n            name: `favicon-${size}.png`,\n          }\n        );\n\n        const href = `${name}`;\n\n        return {\n          asset: {\n            source,\n            path: href,\n          },\n          tag: {\n            tagName: 'link',\n            attributes: {\n              rel,\n              type: 'image/png',\n              sizes: `${size}x${size}`,\n              href: path.join(publicPath, href),\n            },\n          },\n        };\n      }\n    )\n  );\n\n  const faviconUrl = path.join(publicPath, 'favicon.ico');\n\n  const largestImageBuffer = data[data.length - 1].asset.source;\n\n  const faviconBuffer = await Image.generateFaviconAsync(largestImageBuffer, dimensions);\n\n  await Image.Cache.clearUnusedCachesAsync(projectRoot, cacheType);\n\n  return [\n    data[0],\n    data[1],\n    {\n      asset: { source: faviconBuffer, path: 'favicon.ico' },\n      tag: {\n        tagName: 'link',\n        attributes: { rel: 'shortcut icon', href: faviconUrl },\n      },\n    },\n  ];\n}\n\nexport async function generateManifestAsync(\n  options: ProjectOptions,\n  configPath?: string,\n  config?: ExpoConfig\n): Promise<HTMLOutput[]> {\n  if (configPath) {\n    setCustomConfigPath(options.projectRoot, configPath);\n  }\n  const manifest = generateManifestJson(options, config);\n  return [\n    {\n      // TODO: Bacon: Make the types more flexible\n      asset: { source: JSON.stringify(manifest, null, 2) as any, path: 'manifest.json' },\n      tag: {\n        tagName: 'link',\n        attributes: { rel: 'manifest', href: path.join(options.publicPath, 'manifest.json') },\n      },\n    },\n  ];\n}\n\nexport function generateManifestJson(\n  { projectRoot }: Partial<ProjectOptions>,\n  config?: ExpoConfig\n): Manifest {\n  if (!config) {\n    if (!projectRoot) throw new Error('You must either define projectRoot or config');\n    config = getConfigForPWA(projectRoot);\n  }\n  return createPWAManifestFromWebConfig(config.web);\n}\n\nexport { getConfigForPWA };\nexport {\n  getSafariStartupImageConfig,\n  getSafariIconConfig,\n  getFaviconIconConfig,\n  getChromeIconConfig,\n} from './Manifest';\n\nexport { IconOptions, ProjectOptions, HTMLOutput } from './Manifest.types';\n"]}