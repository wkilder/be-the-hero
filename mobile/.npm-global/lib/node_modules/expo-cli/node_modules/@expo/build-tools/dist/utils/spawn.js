"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const spawn_async_1 = __importDefault(require("@expo/spawn-async"));
async function spawn(command, args, _options = {
    stdio: 'inherit',
    cwd: process.cwd(),
}) {
    const options = { ..._options };
    const { logger } = options;
    if (logger) {
        options.stdio = 'pipe';
    }
    const promise = spawn_async_1.default(command, args, options);
    if (logger && promise.child) {
        const streams = {
            stdout: promise.child.stdout,
            stderr: promise.child.stderr,
        };
        pipeOutputToLogger(logger, streams, options);
    }
    return promise;
}
function pipeOutputToLogger(logger, { stdout, stderr } = {}, { stdoutOnly = false } = {}) {
    if (stdout) {
        stdout.on('data', (line) => logMultiline(logger.child({ source: 'stdout' }), line));
    }
    if (stderr) {
        const source = stdoutOnly ? 'stdout' : 'stderr';
        stderr.on('data', (line) => logMultiline(logger.child({ source }), line));
    }
}
function logMultiline(logger, data) {
    if (!data) {
        return;
    }
    const lines = String(data).split('\n');
    lines.forEach((line) => {
        if (line) {
            logger.info(line);
        }
    });
}
exports.default = spawn;
//# sourceMappingURL=spawn.js.map