{"version":3,"file":"spawn.js","sourceRoot":"","sources":["../../src/utils/spawn.ts"],"names":[],"mappings":";;;;;AAEA,oEAA0E;AAQ1E,KAAK,UAAU,KAAK,CAClB,OAAe,EACf,IAAc,EACd,WAAoB;IAClB,KAAK,EAAE,SAAS;IAChB,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE;CACnB;IAED,MAAM,OAAO,GAAG,EAAE,GAAG,QAAQ,EAAE,CAAC;IAChC,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;IAC3B,IAAI,MAAM,EAAE;QACV,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC;KACxB;IACD,MAAM,OAAO,GAAG,qBAAU,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACnD,IAAI,MAAM,IAAI,OAAO,CAAC,KAAK,EAAE;QAC3B,MAAM,OAAO,GAAG;YACd,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,MAAM;YAC5B,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,MAAM;SAC7B,CAAC;QACF,kBAAkB,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;KAC9C;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAS,kBAAkB,CACzB,MAAc,EACd,EAAE,MAAM,EAAE,MAAM,KAA6D,EAAE,EAC/E,EAAE,UAAU,GAAG,KAAK,EAAE,GAAG,EAAE;IAE3B,IAAI,MAAM,EAAE;QACV,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;KACrF;IACD,IAAI,MAAM,EAAE;QACV,MAAM,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC;QAChD,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;KAC3E;AACH,CAAC;AAED,SAAS,YAAY,CAAC,MAAc,EAAE,IAAS;IAC7C,IAAI,CAAC,IAAI,EAAE;QACT,OAAO;KACR;IACD,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACvC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QACrB,IAAI,IAAI,EAAE;YACR,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACnB;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,kBAAe,KAAK,CAAC","sourcesContent":["import { Readable } from 'stream';\n\nimport spawnAsync, { SpawnResult, SpawnOptions } from '@expo/spawn-async';\nimport bunyan from 'bunyan';\n\ntype Options = SpawnOptions & {\n  logger?: bunyan;\n  stdoutOnly?: boolean;\n};\n\nasync function spawn(\n  command: string,\n  args: string[],\n  _options: Options = {\n    stdio: 'inherit',\n    cwd: process.cwd(),\n  },\n): Promise<SpawnResult> {\n  const options = { ..._options };\n  const { logger } = options;\n  if (logger) {\n    options.stdio = 'pipe';\n  }\n  const promise = spawnAsync(command, args, options);\n  if (logger && promise.child) {\n    const streams = {\n      stdout: promise.child.stdout,\n      stderr: promise.child.stderr,\n    };\n    pipeOutputToLogger(logger, streams, options);\n  }\n  return promise;\n}\n\nfunction pipeOutputToLogger(\n  logger: bunyan,\n  { stdout, stderr }: { stdout?: Readable | null; stderr?: Readable | null } = {},\n  { stdoutOnly = false } = {},\n): void {\n  if (stdout) {\n    stdout.on('data', (line) => logMultiline(logger.child({ source: 'stdout' }), line));\n  }\n  if (stderr) {\n    const source = stdoutOnly ? 'stdout' : 'stderr';\n    stderr.on('data', (line) => logMultiline(logger.child({ source }), line));\n  }\n}\n\nfunction logMultiline(logger: bunyan, data: any): void {\n  if (!data) {\n    return;\n  }\n  const lines = String(data).split('\\n');\n  lines.forEach((line) => {\n    if (line) {\n      logger.info(line);\n    }\n  });\n}\n\nexport default spawn;\n"]}