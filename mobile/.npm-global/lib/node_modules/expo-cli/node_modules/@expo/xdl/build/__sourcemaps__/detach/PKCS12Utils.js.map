{"version":3,"sources":["detach/PKCS12Utils.ts"],"names":["getP12CertFingerprint","p12Buffer","passwordRaw","certData","_getCertData","certAsn1","forge","pki","certificateToAsn1","certDer","asn1","toDer","getBytes","md","sha1","create","update","digest","toHex","toUpperCase","findP12CertSerialNumber","serialNumber","replace","Buffer","isBuffer","toString","Error","password","String","p12Der","util","decode64","p12Asn1","fromDer","p12","pkcs12","pkcs12FromAsn1","certBagType","oids","certBag","getBags","bagType"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEO,SAASA,qBAAT,CACLC,SADK,EAELC,WAFK,EAGG;AACR,QAAMC,QAAQ,GAAGC,YAAY,CAACH,SAAD,EAAYC,WAAZ,CAA7B;;AACA,QAAMG,QAAQ,GAAGC,qBAAMC,GAAN,CAAUC,iBAAV,CAA4BL,QAA5B,CAAjB;;AACA,QAAMM,OAAO,GAAGH,qBAAMI,IAAN,CAAWC,KAAX,CAAiBN,QAAjB,EAA2BO,QAA3B,EAAhB;;AACA,SAAON,qBAAMO,EAAN,CAASC,IAAT,CACJC,MADI,GAEJC,MAFI,CAEGP,OAFH,EAGJQ,MAHI,GAIJC,KAJI,GAKJC,WALI,EAAP;AAMD;;AAEM,SAASC,uBAAT,CACLnB,SADK,EAELC,WAFK,EAGU;AACf,QAAMC,QAAQ,GAAGC,YAAY,CAACH,SAAD,EAAYC,WAAZ,CAA7B;;AACA,QAAM;AAAEmB,IAAAA;AAAF,MAAmBlB,QAAzB;AACA,SAAOkB,YAAY,GAAGlB,QAAQ,CAACkB,YAAT,CAAsBC,OAAtB,CAA8B,KAA9B,EAAqC,EAArC,EAAyCH,WAAzC,EAAH,GAA4D,IAA/E;AACD;;AAED,SAASf,YAAT,CAAsBH,SAAtB,EAAkDC,WAAlD,EAA8E;AAC5E,MAAIqB,MAAM,CAACC,QAAP,CAAgBvB,SAAhB,CAAJ,EAAgC;AAC9BA,IAAAA,SAAS,GAAGA,SAAS,CAACwB,QAAV,CAAmB,QAAnB,CAAZ;AACD,GAFD,MAEO,IAAI,OAAOxB,SAAP,KAAqB,QAAzB,EAAmC;AACxC,UAAM,IAAIyB,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,QAAMC,QAAQ,GAAGC,MAAM,CAAC1B,WAAW,IAAI,EAAhB,CAAvB;;AACA,QAAM2B,MAAM,GAAGvB,qBAAMwB,IAAN,CAAWC,QAAX,CAAoB9B,SAApB,CAAf;;AACA,QAAM+B,OAAO,GAAG1B,qBAAMI,IAAN,CAAWuB,OAAX,CAAmBJ,MAAnB,CAAhB;;AACA,QAAMK,GAAG,GAAG5B,qBAAM6B,MAAN,CAAaC,cAAb,CAA4BJ,OAA5B,EAAqCL,QAArC,CAAZ;;AACA,QAAMU,WAAW,GAAG/B,qBAAMC,GAAN,CAAU+B,IAAV,CAAeC,OAAnC;;AACA,QAAMpC,QAAQ,GAAG,oBAAI+B,GAAG,CAACM,OAAJ,CAAY;AAAEC,IAAAA,OAAO,EAAEJ;AAAX,GAAZ,CAAJ,EAA2C,CAACA,WAAD,EAAc,CAAd,EAAiB,MAAjB,CAA3C,CAAjB;;AACA,MAAI,CAAClC,QAAL,EAAe;AACb,UAAM,IAAIuB,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACD,SAAOvB,QAAP;AACD","sourcesContent":["import get from 'lodash/get';\nimport forge from 'node-forge';\n\nexport function getP12CertFingerprint(\n  p12Buffer: Buffer | string,\n  passwordRaw: string | null\n): string {\n  const certData = _getCertData(p12Buffer, passwordRaw);\n  const certAsn1 = forge.pki.certificateToAsn1(certData);\n  const certDer = forge.asn1.toDer(certAsn1).getBytes();\n  return forge.md.sha1\n    .create()\n    .update(certDer)\n    .digest()\n    .toHex()\n    .toUpperCase();\n}\n\nexport function findP12CertSerialNumber(\n  p12Buffer: Buffer | string,\n  passwordRaw: string | null\n): string | null {\n  const certData = _getCertData(p12Buffer, passwordRaw);\n  const { serialNumber } = certData;\n  return serialNumber ? certData.serialNumber.replace(/^0+/, '').toUpperCase() : null;\n}\n\nfunction _getCertData(p12Buffer: Buffer | string, passwordRaw: string | null) {\n  if (Buffer.isBuffer(p12Buffer)) {\n    p12Buffer = p12Buffer.toString('base64');\n  } else if (typeof p12Buffer !== 'string') {\n    throw new Error('_getCertData only takes strings and buffers.');\n  }\n\n  const password = String(passwordRaw || '');\n  const p12Der = forge.util.decode64(p12Buffer);\n  const p12Asn1 = forge.asn1.fromDer(p12Der);\n  const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, password);\n  const certBagType = forge.pki.oids.certBag;\n  const certData = get(p12.getBags({ bagType: certBagType }), [certBagType, 0, 'cert']);\n  if (!certData) {\n    throw new Error(\"_getCertData: couldn't find cert bag\");\n  }\n  return certData;\n}\n"],"file":"../../detach/PKCS12Utils.js","sourceRoot":"/@expo/xdl@57.7.1/src"}