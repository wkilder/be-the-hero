"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const iterall_1 = require("iterall");
function mergeAsyncIterators(...iterators) {
    const promises = iterators.map(() => null);
    return {
        next() {
            return __awaiter(this, void 0, void 0, function* () {
                for (let i = 0; i < promises.length; i++) {
                    if (!promises[i]) {
                        promises[i] = iterators[i].next();
                    }
                }
                const [i, result] = yield Promise.race(promises.map((value, i) => __awaiter(this, void 0, void 0, function* () { return [i, yield value]; })));
                // @ts-ignore
                promises[i] = null;
                return {
                    done: false,
                    // @ts-ignore
                    value: result.value,
                };
            });
        },
        return() {
            return __awaiter(this, void 0, void 0, function* () {
                for (const iterator of iterators) {
                    if (iterator.return) {
                        yield iterator.return();
                    }
                }
                return {
                    done: true,
                    value: undefined,
                };
            });
        },
        throw(error) {
            return __awaiter(this, void 0, void 0, function* () {
                for (const iterator of iterators) {
                    if (iterator.throw) {
                        yield iterator.throw(error);
                    }
                }
                return {
                    done: true,
                    value: undefined,
                };
            });
        },
        [iterall_1.$$asyncIterator]() {
            return this;
        },
    };
}
exports.default = mergeAsyncIterators;
//# sourceMappingURL=mergeAsyncIterators.js.map