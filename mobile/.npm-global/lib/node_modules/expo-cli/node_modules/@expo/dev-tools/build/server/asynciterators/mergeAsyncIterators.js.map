{"version":3,"file":"mergeAsyncIterators.js","sourceRoot":"","sources":["../../../server/asynciterators/mergeAsyncIterators.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,qCAA0C;AAE1C,SAAwB,mBAAmB,CAAC,GAAG,SAAqB;IAClE,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;IAE3C,OAAO;QACC,IAAI;;gBACR,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACxC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;wBAChB,QAAQ,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;qBACnC;iBACF;gBACD,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAO,KAAK,EAAE,CAAC,EAAE,EAAE,gDAAC,OAAA,CAAC,CAAC,EAAE,MAAM,KAAK,CAAC,CAAA,GAAA,CAAC,CAAC,CAAC;gBAE3F,aAAa;gBACb,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;gBACnB,OAAO;oBACL,IAAI,EAAE,KAAK;oBACX,aAAa;oBACb,KAAK,EAAE,MAAM,CAAC,KAAK;iBACpB,CAAC;YACJ,CAAC;SAAA;QAEK,MAAM;;gBACV,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;oBAChC,IAAI,QAAQ,CAAC,MAAM,EAAE;wBACnB,MAAM,QAAQ,CAAC,MAAM,EAAE,CAAC;qBACzB;iBACF;gBACD,OAAO;oBACL,IAAI,EAAE,IAAI;oBACV,KAAK,EAAE,SAAS;iBACjB,CAAC;YACJ,CAAC;SAAA;QAEK,KAAK,CAAC,KAAK;;gBACf,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;oBAChC,IAAI,QAAQ,CAAC,KAAK,EAAE;wBAClB,MAAM,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;qBAC7B;iBACF;gBACD,OAAO;oBACL,IAAI,EAAE,IAAI;oBACV,KAAK,EAAE,SAAS;iBACjB,CAAC;YACJ,CAAC;SAAA;QAED,CAAC,yBAAe,CAAC;YACf,OAAO,IAAI,CAAC;QACd,CAAC;KACF,CAAC;AACJ,CAAC;AAjDD,sCAiDC","sourcesContent":["import { $$asyncIterator } from 'iterall';\n\nexport default function mergeAsyncIterators(...iterators: Array<any>) {\n  const promises = iterators.map(() => null);\n\n  return {\n    async next() {\n      for (let i = 0; i < promises.length; i++) {\n        if (!promises[i]) {\n          promises[i] = iterators[i].next();\n        }\n      }\n      const [i, result] = await Promise.race(promises.map(async (value, i) => [i, await value]));\n\n      // @ts-ignore\n      promises[i] = null;\n      return {\n        done: false,\n        // @ts-ignore\n        value: result.value,\n      };\n    },\n\n    async return() {\n      for (const iterator of iterators) {\n        if (iterator.return) {\n          await iterator.return();\n        }\n      }\n      return {\n        done: true,\n        value: undefined,\n      };\n    },\n\n    async throw(error) {\n      for (const iterator of iterators) {\n        if (iterator.throw) {\n          await iterator.throw(error);\n        }\n      }\n      return {\n        done: true,\n        value: undefined,\n      };\n    },\n\n    [$$asyncIterator]() {\n      return this;\n    },\n  };\n}\n"]}