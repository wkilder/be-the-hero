"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const iterall_1 = require("iterall");
class AsyncIterableRingBuffer {
    constructor(size) {
        this.size = size;
        this.buffer = [];
        this._startItem = 0;
        this._endItem = 0;
        this._pushResolves = [];
    }
    all() {
        return [...this.buffer];
    }
    allWithCursor() {
        return this.buffer.map((item, i) => ({
            item,
            cursor: this._startItem + i,
        }));
    }
    getNextCursor(cursor) {
        if (cursor != null && cursor >= this._startItem) {
            return cursor + 1;
        }
        return this._startItem;
    }
    getLastCursor() {
        return this._endItem;
    }
    get(cursor) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._endItem > cursor) {
                const adjustedCursor = cursor - this._startItem;
                return this.buffer[adjustedCursor];
            }
            else {
                return new Promise(resolve => {
                    this._pushResolves.push(resolve);
                });
            }
        });
    }
    length() {
        return this.buffer.length;
    }
    push(item) {
        this.buffer.push(item);
        this._endItem++;
        this._pushResolves.forEach(resolve => resolve(item));
        this._pushResolves = [];
        if (this.buffer.length > this.size) {
            this.buffer.shift();
            this._startItem++;
        }
    }
    filterWithCursor(filter) {
        let cursor;
        const items = this.buffer.filter((item, i) => {
            cursor = this._startItem + i;
            return filter(item, cursor);
        });
        return {
            cursor,
            items,
        };
    }
    getIterator(cursor) {
        let buffer = this;
        let iterableCursor = cursor;
        return {
            next() {
                return __awaiter(this, void 0, void 0, function* () {
                    iterableCursor = buffer.getNextCursor(iterableCursor);
                    const value = yield buffer.get(iterableCursor);
                    return {
                        value: Object.assign(Object.assign({}, value), { cursor: iterableCursor }),
                        done: false,
                    };
                });
            },
            [iterall_1.$$asyncIterator]() {
                return this;
            },
        };
    }
}
exports.default = AsyncIterableRingBuffer;
//# sourceMappingURL=AsyncIterableRingBuffer.js.map