"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const apollo_server_express_1 = require("apollo-server-express");
const xdl_1 = require("@expo/xdl");
const express_1 = __importDefault(require("express"));
const http_1 = __importDefault(require("http"));
const next_1 = __importDefault(require("next"));
const openBrowser_1 = __importDefault(require("react-dev-utils/openBrowser"));
const DevToolsServer_1 = require("./DevToolsServer");
const PORT = 3333;
function run() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const projectDir = process.argv[2];
            if (!projectDir) {
                throw new Error('No project dir specified.\nUsage: yarn dev <project-dir>');
            }
            const app = next_1.default({ dev: true });
            yield app.prepare();
            const server = express_1.default();
            const authenticationContext = yield DevToolsServer_1.createAuthenticationContextAsync({ port: PORT });
            server.get('/dev-tools-info', authenticationContext.requestHandler);
            server.get('/graphiql', apollo_server_express_1.graphiqlExpress({
                endpointURL: authenticationContext.webSocketGraphQLUrl,
                websocketConnectionParams: {
                    clientAuthenticationToken: authenticationContext.clientAuthenticationToken,
                },
            }));
            server.get('*', app.getRequestHandler());
            const httpServer = http_1.default.createServer(server);
            yield new Promise((resolve, reject) => {
                httpServer.once('error', reject);
                httpServer.once('listening', resolve);
                httpServer.listen(PORT, 'localhost');
            });
            DevToolsServer_1.startGraphQLServer(projectDir, httpServer, authenticationContext);
            console.log('Starting project...');
            yield xdl_1.Project.startAsync(projectDir);
            let url = `http://localhost:${PORT}`;
            console.log(`Development server running at ${url}`);
            openBrowser_1.default(url);
        }
        catch (error) {
            console.error(error);
            process.exit(1);
        }
    });
}
run();
//# sourceMappingURL=dev-server.js.map